// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.evarist.rootest;

import java.util.List;
import java.util.Random;
import org.evarist.rootest.MyUser;
import org.springframework.stereotype.Component;

privileged aspect MyUserDataOnDemand_Roo_DataOnDemand {
    
    declare @type: MyUserDataOnDemand: @Component;
    
    private Random MyUserDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<MyUser> MyUserDataOnDemand.data;
    
    public MyUser MyUserDataOnDemand.getNewTransientMyUser(int index) {
        org.evarist.rootest.MyUser obj = new org.evarist.rootest.MyUser();
        setName(obj, index);
        setAddress1(obj, index);
        setAddress2(obj, index);
        setCity(obj, index);
        setSt(obj, index);
        setZip(obj, index);
        return obj;
    }
    
    private void MyUserDataOnDemand.setName(MyUser obj, int index) {
        java.lang.String name = "name_" + index;
        obj.setName(name);
    }
    
    private void MyUserDataOnDemand.setAddress1(MyUser obj, int index) {
        java.lang.String address1 = "address1_" + index;
        obj.setAddress1(address1);
    }
    
    private void MyUserDataOnDemand.setAddress2(MyUser obj, int index) {
        java.lang.String address2 = "address2_" + index;
        obj.setAddress2(address2);
    }
    
    private void MyUserDataOnDemand.setCity(MyUser obj, int index) {
        java.lang.String city = "city_" + index;
        obj.setCity(city);
    }
    
    private void MyUserDataOnDemand.setSt(MyUser obj, int index) {
        java.lang.String st = "st_" + index;
        obj.setSt(st);
    }
    
    private void MyUserDataOnDemand.setZip(MyUser obj, int index) {
        java.lang.String zip = "zip_" + index;
        obj.setZip(zip);
    }
    
    public MyUser MyUserDataOnDemand.getSpecificMyUser(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        MyUser obj = data.get(index);
        return MyUser.findMyUser(obj.getId());
    }
    
    public MyUser MyUserDataOnDemand.getRandomMyUser() {
        init();
        MyUser obj = data.get(rnd.nextInt(data.size()));
        return MyUser.findMyUser(obj.getId());
    }
    
    public boolean MyUserDataOnDemand.modifyMyUser(MyUser obj) {
        return false;
    }
    
    public void MyUserDataOnDemand.init() {
        data = org.evarist.rootest.MyUser.findMyUserEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'MyUser' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<org.evarist.rootest.MyUser>();
        for (int i = 0; i < 10; i++) {
            org.evarist.rootest.MyUser obj = getNewTransientMyUser(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
