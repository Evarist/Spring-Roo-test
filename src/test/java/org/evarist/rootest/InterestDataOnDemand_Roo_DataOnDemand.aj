// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.evarist.rootest;

import java.util.List;
import java.util.Random;
import org.evarist.rootest.Interest;
import org.springframework.stereotype.Component;

privileged aspect InterestDataOnDemand_Roo_DataOnDemand {
    
    declare @type: InterestDataOnDemand: @Component;
    
    private Random InterestDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<Interest> InterestDataOnDemand.data;
    
    public Interest InterestDataOnDemand.getNewTransientInterest(int index) {
        org.evarist.rootest.Interest obj = new org.evarist.rootest.Interest();
        setType(obj, index);
        return obj;
    }
    
    private void InterestDataOnDemand.setType(Interest obj, int index) {
        java.lang.String type = "type_" + index;
        obj.setType(type);
    }
    
    public Interest InterestDataOnDemand.getSpecificInterest(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Interest obj = data.get(index);
        return Interest.findInterest(obj.getId());
    }
    
    public Interest InterestDataOnDemand.getRandomInterest() {
        init();
        Interest obj = data.get(rnd.nextInt(data.size()));
        return Interest.findInterest(obj.getId());
    }
    
    public boolean InterestDataOnDemand.modifyInterest(Interest obj) {
        return false;
    }
    
    public void InterestDataOnDemand.init() {
        data = org.evarist.rootest.Interest.findInterestEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Interest' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<org.evarist.rootest.Interest>();
        for (int i = 0; i < 10; i++) {
            org.evarist.rootest.Interest obj = getNewTransientInterest(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
